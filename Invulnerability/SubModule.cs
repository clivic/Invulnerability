using System;
using System.Collections;
using System.Collections.Generic;
using System.Diagnostics.PerformanceData;
using System.IO;
using System.Linq;
using System.Reflection;
using System.Text;
using TaleWorlds.CampaignSystem;
using TaleWorlds.CampaignSystem.Encyclopedia;
using TaleWorlds.Core;
using TaleWorlds.InputSystem;
using TaleWorlds.Localization;
using TaleWorlds.MountAndBlade;
using TaleWorlds.Engine;
using TaleWorlds.Library;
using Module = TaleWorlds.MountAndBlade.Module;
using TaleWorlds.CampaignSystem.SandBox.CampaignBehaviors;
using TaleWorlds.CampaignSystem.ViewModelCollection.Encyclopedia;
using TaleWorlds.Engine.GauntletUI;
using TaleWorlds.Engine.Screens;
using TaleWorlds.GauntletUI.Data;
using HarmonyLib;

namespace Invulnerability
{
    public class SubModule : MBSubModuleBase
    {
        protected override void OnGameStart(Game game, IGameStarter gameStarterObject)
        {
            // Logs
            if (!Directory.Exists(Helper.FilesPath))
            {
                Directory.CreateDirectory(Helper.FilesPath);
            }
            Helper.ClearLog();
            Helper.ShowAndLog($"Initialized {Config.MOD_NAME} mod.");
            if (!(game.GameType is Campaign)) { Helper.Log("Game mode is not campaign."); return; }
            Helper.Log("Game mode is campaign.");

            // Inject Harmony
            var harmony = new Harmony("com.clivic.invulnerability");
            harmony.PatchAll();

            base.OnGameStart(game, gameStarterObject);
        }

        protected override void OnApplicationTick(float dt)
        {
            base.OnApplicationTick(dt);

            if (!InputKey.LeftControl.IsDown() && !InputKey.RightControl.IsDown()) return;
            if (Campaign.Current == null) return;
            if (!Campaign.Current.GameStarted) return;
            if (InputKey.I.IsReleased())
            {
                Config.PRINT_HURT = !Config.PRINT_HURT;
                if (Config.PRINT_HURT)
                {
                    Helper.ShowAndLog("UI FX and logs on hit: ON");
                }
                else
                {
                    Helper.ShowAndLog("UI FX and logs on hit: OFF");
                }
            }
        }

        [Obsolete]
        public void ToggleInvulnerability()
        {
            if(Agent.Main != null)
            {
                Agent.Main.SetInvulnerable(!Agent.Main.Invulnerable);

                Helper.ShowAndLog($"{Agent.Main.Name} {(Agent.Main.Invulnerable ? "is invulnerable" : "is vulnerable")}");
            }
            else
            {
                Helper.ShowAndLog($"Agent Main is null!", new Color(1, 0, 0));
            }
        }
    }
}