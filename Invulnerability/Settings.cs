using System;
using System.Xml.Serialization;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;
using MCM.Abstractions.Attributes;
using MCM.Abstractions.Attributes.v2;
using MCM.Abstractions.Settings.Base.Global;

namespace Invulnerability
{
    public class InvulnerableSettings : AttributeGlobalSettings<InvulnerableSettings>
    {
        public override string Id { get; } = $"{Config.MOD_NAME}Settings";
        public override string DisplayName { get; } = $"Invulnerable Mod {typeof(InvulnerableSettings).Assembly.GetName().Version.ToString(3)}";
        public override string FolderName { get; } = Config.MOD_NAME;
        public override string FormatType => "json";

        [SettingPropertyBool("Enabled", RequireRestart = false, HintText = "If enabled, you're invulnerable")]
        [SettingPropertyGroup("General")]
        public bool Enabled { get; set; } = true;

        [SettingPropertyFloatingInteger("Arrows breaking threshold",1,200, "0.0", RequireRestart = false, HintText = "Arrows bounce if less than this threshold. Otherwise, break")]
        [SettingPropertyGroup("General")]
        public float ArrowBreakingThres { get; set; } = 50f;

        [SettingPropertyBool("Print damage received", RequireRestart = false, HintText = "If checked, show details upon receiving damages. Otherwise, nothing")]
        [SettingPropertyGroup("General")]
        public bool PrintHurt { get; set; } = false;
    }
}


//using ModLib.Definitions;
//using ModLib.Definitions.Attributes;

//namespace Invulnerability
//{
//    public class Settings : SettingsBase
//    {
//        [XmlElement]
//        public override string ID { get; set; } = $"{Config.MOD_NAME}Settings";

//        public override string ModuleFolderName => Config.MOD_NAME;

//        public override string ModName => Config.MOD_NAME;

//        public static Settings Instance
//        {
//            get
//            {
//                return (Settings)SettingsDatabase.GetSettings<Settings>();
//            }
//        }

//        //*****************************************

//        [XmlElement]
//        [SettingProperty("Arrows breaking threshold", "Arrows bounce if less than this threshold. Otherwise, break")]
//        public float ArrowBreakingThres { get; set; } = 50f;
//    }
//}
