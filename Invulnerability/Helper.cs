using System;
using System.CodeDom;
using System.Collections.Generic;
using System.IO;
using System.Linq;
using System.Reflection;
using System.Text;
using System.Threading.Tasks;
using TaleWorlds.CampaignSystem;
using TaleWorlds.CampaignSystem.ViewModelCollection.Encyclopedia;
using TaleWorlds.Core;
using TaleWorlds.Library;
using HarmonyLib;
using TaleWorlds.CampaignSystem.SandBox.CampaignBehaviors;
using TaleWorlds.CampaignSystem.SandBox.GameComponents;

namespace Invulnerability
{
    public class Config
    {
        public const string MOD_NAME = "Invulnerability";

        [System.Obsolete]
        public static bool PRINT_HURT = false;
    }

    class Helper
    {
        public static string FilesPath => Environment.GetFolderPath(Environment.SpecialFolder.Personal) +
                                         $"\\Mount and Blade II Bannerlord\\{Config.MOD_NAME}\\";

        [System.Obsolete]
        public static string SavePath => FilesPath + "Birthdays\\";

        public static string LogPath => FilesPath + $"{Config.MOD_NAME}_log.txt";

        public static void ClearLog()
        {
            string logPath = Helper.LogPath;
            if (File.Exists(logPath))
            {
                File.Delete(logPath);
            }
        }

        public static void Log(string text)
        {
            File.AppendAllText(LogPath, text + Environment.NewLine);
        }

        public static void ShowMsg(string text)
        {
            InformationManager.DisplayMessage(new InformationMessage(text));
        }

        public static void ShowMsg(string text, ref Color color)
        {
            InformationManager.DisplayMessage(new InformationMessage(text, color));
        }

        public static void ShowAndLog(string text)
        {
            ShowMsg(text);
            Log(text);
        }

        public static void ShowAndLog(string text, Color color)
        {
            ShowMsg(text, ref color);
            Log(text);
        }

        private static IEnumerable<string> GetEnumValues(Type enumType)
        {
            if (!enumType.IsEnum) yield break;

            foreach (int result in Enum.GetValues(enumType))
            {
                var str = Enum.ToObject(enumType, result).ToString();
                yield return str;
            }
        }

    }

}
